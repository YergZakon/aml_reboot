import streamlit as st
import json
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import plotly.express as px
import plotly.graph_objects as go
import os
from datetime import datetime, timedelta
import sys
import io
import base64

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ check_all_transactions.py
from check_all_transactions import (
    MONITORING_SETTINGS, MONITORING_RULES, RULE_NAMES_RU,
    is_threshold_exceeded, is_high_risk_jurisdiction, is_missing_recipient,
    is_missing_payment_purpose, is_suspicious_activity, is_unusual_transaction_type,
    is_blacklisted_entity, is_round_amount, is_structured_transaction, is_high_risk_client,
    check_all_aml_rules, format_amount, get_person_info
)

st.set_page_config(
    page_title="–ê–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π - –êML –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥",
    page_icon="üîç",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
def settings_page():
    st.title("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
    
    st.markdown("### –ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è")
    threshold_amount = st.number_input(
        "–ü–æ—Ä–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ –¥–ª—è –∫—Ä—É–ø–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π",
        min_value=1000000, 
        max_value=100000000,
        value=MONITORING_SETTINGS["threshold_amount"],
        step=1000000,
        format="%d"
    )
    
    st.markdown("### –°—Ç—Ä–∞–Ω—ã –≤—ã—Å–æ–∫–æ–≥–æ —Ä–∏—Å–∫–∞")
    countries_text = st.text_area(
        "–ö–æ–¥—ã —Å—Ç—Ä–∞–Ω –≤—ã—Å–æ–∫–æ–≥–æ —Ä–∏—Å–∫–∞ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)",
        value=", ".join(map(str, MONITORING_SETTINGS["high_risk_countries"])),
        height=100
    )
    high_risk_countries = [int(code.strip()) for code in countries_text.split(",") if code.strip().isdigit()]
    
    st.markdown("### –¢–∏–ø—ã –≤—ã—Å–æ–∫–æ—Ä–∏—Å–∫–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π")
    operation_types_text = st.text_area(
        "–ö–æ–¥—ã —Ç–∏–ø–æ–≤ –≤—ã—Å–æ–∫–æ—Ä–∏—Å–∫–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)",
        value=", ".join(map(str, MONITORING_SETTINGS["high_risk_operation_types"])),
        height=100
    )
    high_risk_operation_types = [int(code.strip()) for code in operation_types_text.split(",") if code.strip().isdigit()]
    
    st.markdown("### –î–∏–∞–ø–∞–∑–æ–Ω –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Å—É–º–º")
    col1, col2 = st.columns(2)
    with col1:
        min_suspicious = st.number_input(
            "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞",
            min_value=1000000,
            max_value=50000000,
            value=MONITORING_SETTINGS["suspicious_amount_range"][0],
            step=1000000,
            format="%d"
        )
    with col2:
        max_suspicious = st.number_input(
            "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞",
            min_value=1000000,
            max_value=50000000,
            value=MONITORING_SETTINGS["suspicious_amount_range"][1],
            step=1000000,
            format="%d"
        )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"):
        MONITORING_SETTINGS["threshold_amount"] = threshold_amount
        MONITORING_SETTINGS["high_risk_countries"] = high_risk_countries
        MONITORING_SETTINGS["high_risk_operation_types"] = high_risk_operation_types
        MONITORING_SETTINGS["suspicious_amount_range"] = [min_suspicious, max_suspicious]
        
        st.success("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
        st.json(MONITORING_SETTINGS)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
def process_uploaded_file(uploaded_file, min_risk_score=1):
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
        file_content = uploaded_file.read()
        data = json.loads(file_content)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
        if isinstance(data, list):
            messages = data
        elif isinstance(data, dict) and 'messages' in data:
            messages = data['messages']
        else:
            messages = [data]
        
        total_count = len(messages)
        st.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {total_count} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞...")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        progress_bar = st.progress(0)
        status_text = st.empty()
        
        risky_transactions = []
        tx_count = 0
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        for i, msg in enumerate(messages):
            if 'row_to_json' in msg:
                tx_data = msg['row_to_json']
                tx_count += 1
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ä–∏—Å–∫–∏
                aml_results = check_all_aml_rules(tx_data)
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–∏—Å–∫–∏, –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫
                if aml_results['risk_score'] >= min_risk_score:
                    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
                    aml_results['tx_data'] = tx_data
                    risky_transactions.append(aml_results)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                progress = (i + 1) / total_count
                progress_bar.progress(progress)
                status_text.text(f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress*100:.1f}% ({i+1}/{total_count})")
        
        status_text.text(f"–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {tx_count} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.")
        return risky_transactions, tx_count
        
    except json.JSONDecodeError as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ JSON: {e}")
        return [], 0
        
    except Exception as e:
        st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        return [], 0

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ DataFrame —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
def prepare_results_dataframe(risky_transactions):
    data = []
    
    for tx in risky_transactions:
        tx_data = tx['tx_data']
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–∞–Ω–Ω—ã—Ö
        tx_row = {
            'ID': tx_data.get('gmess_id', ''),
            '–î–∞—Ç–∞': tx_data.get('goper_trans_date', '')[:10] if tx_data.get('goper_trans_date') else '',
            '–°—É–º–º–∞': tx_data.get('goper_tenge_amount', 0),
            '–ü–ª–∞—Ç–µ–ª—å—â–∏–∫': get_person_info(tx_data, True),
            '–ü–æ–ª—É—á–∞—Ç–µ–ª—å': get_person_info(tx_data, False),
            '–û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞': tx['risk_score'],
            '–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞': tx['risk_level']
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∞–≤–∏–ª–∞
        for rule in MONITORING_RULES:
            tx_row[rule] = tx.get(rule, 0)
        
        data.append(tx_row)
    
    # –°–æ–∑–¥–∞–µ–º DataFrame
    df = pd.DataFrame(data)
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—É–º–º—É –≤ —á–∏—Å–ª–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç
    df['–°—É–º–º–∞'] = pd.to_numeric(df['–°—É–º–º–∞'], errors='coerce')
    
    return df

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
def show_statistics(df, total_transactions):
    st.title("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    high_risk_count = len(df[df['–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞'] == '–í—ã—Å–æ–∫–∏–π'])
    medium_risk_count = len(df[df['–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞'] == '–°—Ä–µ–¥–Ω–∏–π'])
    low_risk_count = len(df[df['–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞'] == '–ù–∏–∑–∫–∏–π'])
    
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å –≤—ã—Å–æ–∫–∏–º —Ä–∏—Å–∫–æ–º", f"{high_risk_count} ({high_risk_count/total_transactions:.1%})")
    with col2:
        st.metric("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å–æ —Å—Ä–µ–¥–Ω–∏–º —Ä–∏—Å–∫–æ–º", f"{medium_risk_count} ({medium_risk_count/total_transactions:.1%})")
    with col3:
        st.metric("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å –Ω–∏–∑–∫–∏–º —Ä–∏—Å–∫–æ–º", f"{low_risk_count} ({low_risk_count/total_transactions:.1%})")
    
    # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –ø–æ –æ—Ü–µ–Ω–∫–∞–º —Ä–∏—Å–∫–∞
    fig = px.histogram(
        df, 
        x='–û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞', 
        color='–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞',
        color_discrete_map={'–í—ã—Å–æ–∫–∏–π': 'red', '–°—Ä–µ–¥–Ω–∏–π': 'orange', '–ù–∏–∑–∫–∏–π': 'green'},
        title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ –æ—Ü–µ–Ω–∫–µ —Ä–∏—Å–∫–∞'
    )
    st.plotly_chart(fig, use_container_width=True)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ä–∞–±–æ—Ç–∞–≤—à–∏–º –ø—Ä–∞–≤–∏–ª–∞–º
    st.subheader("–ß–∞—Å—Ç–æ—Ç–∞ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –ø—Ä–∞–≤–∏–ª")
    
    rule_stats = {}
    rule_names = {}
    for rule in MONITORING_RULES:
        rule_stats[rule] = df[rule].sum()
        rule_names[rule] = RULE_NAMES_RU.get(rule, rule)
    
    rule_stats_df = pd.DataFrame({
        '–ü—Ä–∞–≤–∏–ª–æ': [rule_names[rule] for rule in rule_stats.keys()],
        '–ö–æ–¥ –ø—Ä–∞–≤–∏–ª–∞': list(rule_stats.keys()),
        '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': list(rule_stats.values()),
        '–ü—Ä–æ—Ü–µ–Ω—Ç': [count / len(df) * 100 for count in rule_stats.values()]
    })
    rule_stats_df = rule_stats_df.sort_values('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', ascending=False)
    
    fig2 = px.bar(
        rule_stats_df,
        x='–ü—Ä–∞–≤–∏–ª–æ',
        y='–ü—Ä–æ—Ü–µ–Ω—Ç',
        color='–ü—Ä–æ—Ü–µ–Ω—Ç',
        title='–ü—Ä–æ—Ü–µ–Ω—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∞–≤–∏–ª–∞',
        color_continuous_scale='Reds'
    )
    st.plotly_chart(fig2, use_container_width=True)
    
    # –°—É–º–º—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—É–º–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
    
    fig3 = px.box(
        df,
        y='–°—É–º–º–∞',
        color='–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞',
        color_discrete_map={'–í—ã—Å–æ–∫–∏–π': 'red', '–°—Ä–µ–¥–Ω–∏–π': 'orange', '–ù–∏–∑–∫–∏–π': 'green'},
        points="all",
        title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—É–º–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ —É—Ä–æ–≤–Ω—é —Ä–∏—Å–∫–∞'
    )
    st.plotly_chart(fig3, use_container_width=True)
    
    # –¢–æ–ø-10 –∫—Ä—É–ø–Ω–µ–π—à–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    st.subheader("–¢–û–ü-10 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ —Å—É–º–º–µ")
    top_by_amount = df.sort_values('–°—É–º–º–∞', ascending=False).head(10)
    st.dataframe(
        top_by_amount[['ID', '–î–∞—Ç–∞', '–°—É–º–º–∞', '–ü–ª–∞—Ç–µ–ª—å—â–∏–∫', '–ü–æ–ª—É—á–∞—Ç–µ–ª—å', '–û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞', '–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞']],
        use_container_width=True
    )
    
    # –¢–æ–ø-10 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ –æ—Ü–µ–Ω–∫–µ —Ä–∏—Å–∫–∞
    st.subheader("–¢–û–ü-10 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ –æ—Ü–µ–Ω–∫–µ —Ä–∏—Å–∫–∞")
    top_by_risk = df.sort_values('–û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞', ascending=False).head(10)
    st.dataframe(
        top_by_risk[['ID', '–î–∞—Ç–∞', '–°—É–º–º–∞', '–ü–ª–∞—Ç–µ–ª—å—â–∏–∫', '–ü–æ–ª—É—á–∞—Ç–µ–ª—å', '–û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞', '–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞']],
        use_container_width=True
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
def show_results(df):
    st.title("üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ
    if df.empty:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        return
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    st.sidebar.header("–§–∏–ª—å—Ç—Ä—ã")
    
    # –§–∏–ª—å—Ç—Ä –ø–æ —É—Ä–æ–≤–Ω—é —Ä–∏—Å–∫–∞
    risk_levels = df['–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞'].unique().tolist()
    selected_risk_levels = st.sidebar.multiselect(
        "–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞",
        options=risk_levels,
        default=risk_levels
    )
    
    # –§–∏–ª—å—Ç—Ä –ø–æ –æ—Ü–µ–Ω–∫–µ —Ä–∏—Å–∫–∞
    min_score = int(df['–û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞'].min())
    max_score = int(df['–û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞'].max())
    selected_score_range = st.sidebar.slider(
        "–û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞",
        min_value=min_score,
        max_value=max_score,
        value=(min_score, max_score)
    )
    
    # –§–∏–ª—å—Ç—Ä –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É —Å—É–º–º
    min_amount = float(df['–°—É–º–º–∞'].min())
    max_amount = float(df['–°—É–º–º–∞'].max())
    selected_amount_range = st.sidebar.slider(
        "–î–∏–∞–ø–∞–∑–æ–Ω —Å—É–º–º",
        min_value=min_amount,
        max_value=max_amount,
        value=(min_amount, max_amount),
        format="%.0f"
    )
    
    # –§–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º
    rule_options = {RULE_NAMES_RU.get(rule, rule): rule for rule in MONITORING_RULES}
    selected_rule_names = st.sidebar.multiselect(
        "–°—Ä–∞–±–æ—Ç–∞–≤—à–∏–µ –ø—Ä–∞–≤–∏–ª–∞",
        options=list(rule_options.keys()),
        default=[]
    )
    selected_rules = [rule_options[name] for name in selected_rule_names]
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
    mask = (
        df['–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞'].isin(selected_risk_levels) &
        (df['–û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞'] >= selected_score_range[0]) &
        (df['–û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞'] <= selected_score_range[1]) &
        (df['–°—É–º–º–∞'] >= selected_amount_range[0]) &
        (df['–°—É–º–º–∞'] <= selected_amount_range[1])
    )
    
    # –§–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º
    if selected_rules:
        rule_mask = df[selected_rules[0]] == 1
        for rule in selected_rules[1:]:
            rule_mask = rule_mask & (df[rule] == 1)
        mask = mask & rule_mask
    
    filtered_df = df[mask]
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    st.subheader(f"–ù–∞–π–¥–µ–Ω–æ {len(filtered_df)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
    
    # –û–ø—Ü–∏–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    st.sidebar.header("–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
    sort_by = st.sidebar.selectbox(
        "–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ",
        options=["–û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞", "–°—É–º–º–∞", "–î–∞—Ç–∞", "ID"],
        index=0
    )
    
    sort_order = st.sidebar.radio(
        "–ü–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏",
        options=["–ü–æ —É–±—ã–≤–∞–Ω–∏—é", "–ü–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é"],
        index=0
    )
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
    ascending = sort_order == "–ü–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é"
    filtered_df = filtered_df.sort_values(sort_by, ascending=ascending)
    
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    rows_per_page = st.sidebar.slider(
        "–°—Ç—Ä–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ",
        min_value=10,
        max_value=100,
        value=25,
        step=5
    )
    
    total_pages = max(1, len(filtered_df) // rows_per_page + (1 if len(filtered_df) % rows_per_page > 0 else 0))
    
    if total_pages > 1:
        page = st.sidebar.number_input(
            f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ (–≤—Å–µ–≥–æ {total_pages})",
            min_value=1,
            max_value=total_pages,
            value=1
        )
    else:
        page = 1
    
    start_idx = (page - 1) * rows_per_page
    end_idx = min(start_idx + rows_per_page, len(filtered_df))
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    st.dataframe(
        filtered_df.iloc[start_idx:end_idx][['ID', '–î–∞—Ç–∞', '–°—É–º–º–∞', '–ü–ª–∞—Ç–µ–ª—å—â–∏–∫', '–ü–æ–ª—É—á–∞—Ç–µ–ª—å', '–û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞', '–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞']],
        use_container_width=True,
        height=500
    )
    
    # –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if not filtered_df.empty:
        csv = filtered_df.to_csv(index=False).encode('utf-8')
        st.download_button(
            label="–°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ CSV",
            data=csv,
            file_name="risky_transactions.csv",
            mime="text/csv",
        )
    
    # –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    st.subheader("–î–µ—Ç–∞–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
    
    selected_tx_id = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π",
        options=filtered_df['ID'].unique().tolist(),
        format_func=lambda x: f"ID: {x}"
    )
    
    if selected_tx_id:
        selected_tx = filtered_df[filtered_df['ID'] == selected_tx_id].iloc[0]
        tx_data = None
        
        # –ù–∞—Ö–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        for tx in st.session_state.risky_transactions:
            if tx['tx_data'].get('gmess_id') == selected_tx_id:
                tx_data = tx['tx_data']
                aml_results = {k: v for k, v in tx.items() if k != 'tx_data'}
                break
        
        if tx_data:
            col1, col2 = st.columns(2)
            
            with col1:
                st.subheader("–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
                st.markdown(f"**ID:** {tx_data.get('gmess_id')}")
                st.markdown(f"**–î–∞—Ç–∞:** {tx_data.get('goper_trans_date')}")
                st.markdown(f"**–°—É–º–º–∞:** {format_amount(tx_data.get('goper_tenge_amount', 0))} —Ç–µ–Ω–≥–µ")
                st.markdown(f"**–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏:** {tx_data.get('goper_idview')} (–≤–∏–¥), {tx_data.get('goper_idtype')} (—Ç–∏–ø)")
                
                st.subheader("–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞")
                st.text_area("", value=tx_data.get('goper_dopinfo', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'), height=150, disabled=True)
                
                st.subheader("–ü–ª–∞—Ç–µ–ª—å—â–∏–∫")
                st.markdown(f"**–ò–º—è:** {tx_data.get('gmember_name_pl1', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
                st.markdown(f"**–ò–ò–ù/–ë–ò–ù:** {tx_data.get('gmember_maincode_pl1', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
                st.markdown(f"**–°—Ç—Ä–∞–Ω–∞:** {tx_data.get('gmember_residence_pl1', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}")
                
                st.subheader("–ü–æ–ª—É—á–∞—Ç–µ–ª—å")
                st.markdown(f"**–ò–º—è:** {tx_data.get('gmember_name_pol1', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
                st.markdown(f"**–ò–ò–ù/–ë–ò–ù:** {tx_data.get('gmember_maincode_pol1', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
                st.markdown(f"**–°—Ç—Ä–∞–Ω–∞:** {tx_data.get('gmember_residence_pol1', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}")
                
            with col2:
                st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏")
                st.markdown(f"**–û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞:** {aml_results['risk_score']}/10")
                st.markdown(f"**–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞:** {aml_results['risk_level']}")
                
                st.subheader("–°—Ä–∞–±–æ—Ç–∞–≤—à–∏–µ –ø—Ä–∞–≤–∏–ª–∞")
                triggered_rules = []
                for rule in MONITORING_RULES:
                    if aml_results.get(rule, 0) == 1:
                        triggered_rules.append(rule)
                
                if triggered_rules:
                    for rule in triggered_rules:
                        rule_name = RULE_NAMES_RU.get(rule, rule)
                        st.markdown(f"- {rule_name}")
                else:
                    st.markdown("–ù–µ—Ç —Å—Ä–∞–±–æ—Ç–∞–≤—à–∏—Ö –ø—Ä–∞–≤–∏–ª")
                
                st.subheader("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
                if aml_results['risk_level'] == '–í—ã—Å–æ–∫–∏–π':
                    st.warning("""
                    –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ç—â–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.
                    –í–æ–∑–º–æ–∂–Ω–æ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ê–§–ú.
                    """)
                    
                    if aml_results.get('missing_recipient') == 1:
                        st.info("* –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤.")
                    
                    if aml_results.get('threshold_exceeded') == 1:
                        st.info("* –¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤.")
                        
                    if aml_results.get('high_risk_client') == 1:
                        st.info("* –¢—Ä–µ–±—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∫–ª–∏–µ–Ω—Ç–µ –∏ –ø—Ä–æ–≤–µ—Å—Ç–∏ —É–≥–ª—É–±–ª–µ–Ω–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É.")
                        
                elif aml_results['risk_level'] == '–°—Ä–µ–¥–Ω–∏–π':
                    st.info("""
                    –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —Å—Ä–∞–±–æ—Ç–∞–≤—à–∏–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º.
                    """)
                    
                    if aml_results.get('unusual_transaction_type') == 1:
                        st.info("* –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª—é –∫–ª–∏–µ–Ω—Ç–∞.")
                        
                    if aml_results.get('round_amount') == 1:
                        st.info("* –ò–∑—É—á–∏—Ç–µ –∏—Å—Ç–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤.")
                else:
                    st.success("–û—Å–æ–±—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–µ—Ç, —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∏–º–µ–µ—Ç –Ω–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞.")
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                st.subheader("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
                
                with st.expander("–í—Å–µ –ø–æ–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"):
                    for key, value in tx_data.items():
                        if key.startswith('gmember') or key.startswith('goper') or key.startswith('gcfm'):
                            st.markdown(f"**{key}:** {value}")

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    st.sidebar.image("https://www.astanatimes.com/wp-content/uploads/2022/07/FIU_AFMRK.png", width=200)
    st.sidebar.title("AML –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏–æ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, –µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    if 'risky_transactions' not in st.session_state:
        st.session_state.risky_transactions = []
    
    if 'total_transactions' not in st.session_state:
        st.session_state.total_transactions = 0
    
    if 'results_df' not in st.session_state:
        st.session_state.results_df = None
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    page = st.sidebar.radio(
        "–ù–∞–≤–∏–≥–∞—Ü–∏—è",
        options=["–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"]
    )
    
    # –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    if page == "–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö":
        st.title("üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
        
        st.write("""
        –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. 
        –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≤–µ—Ä–∏—Ç –∫–∞–∂–¥—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–∞–≤–∏–ª–∞–º AML –∏ –≤—ã–¥–µ–ª–∏—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏.
        """)
        
        uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª JSON", type=["json"])
        
        min_risk_score = st.slider(
            "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã",
            min_value=1,
            max_value=10,
            value=1
        )
        
        if uploaded_file is not None:
            if st.button("–ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑"):
                with st.spinner("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö..."):
                    risky_transactions, total_transactions = process_uploaded_file(uploaded_file, min_risk_score)
                    
                    if risky_transactions:
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Å–µ—Å—Å–∏–∏
                        st.session_state.risky_transactions = risky_transactions
                        st.session_state.total_transactions = total_transactions
                        
                        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º DataFrame –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                        results_df = prepare_results_dataframe(risky_transactions)
                        st.session_state.results_df = results_df
                        
                        st.success(f"–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –ù–∞–π–¥–µ–Ω–æ {len(risky_transactions)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å —Ä–∏—Å–∫–∞–º–∏.")
                        st.balloons()
                        
                        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                        st.markdown("### [–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ](#–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)")
                    else:
                        st.warning("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å —Ä–∏—Å–∫–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞.")
                        
    # –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    elif page == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        if st.session_state.results_df is not None:
            show_statistics(st.session_state.results_df, st.session_state.total_transactions)
        else:
            st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è. –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏.")
    
    # –°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    elif page == "–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑":
        if st.session_state.results_df is not None:
            show_results(st.session_state.results_df)
        else:
            st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è. –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏.")
    
    # –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    elif page == "–ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        settings_page()
    
    st.sidebar.markdown("---")
    st.sidebar.markdown("¬© 2023 AML –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")

if __name__ == "__main__":
    main() 